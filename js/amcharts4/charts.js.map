{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/types/PercentChart.ts","webpack:///../../../../../src/.internal/charts/elements/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts"],"names":["__webpack_require__","d","__webpack_exports__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","__WEBPACK_IMPORTED_MODULE_2__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_7__series_XYSeries__","__WEBPACK_IMPORTED_MODULE_8__cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_9__core_elements_ZoomOutButton__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_11__core_Registry__","__WEBPACK_IMPORTED_MODULE_12__elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_16__core_utils_Utils__","_super","_this","call","this","className","applyTheme","_axisRendererX","_axisRendererY","maskBullets","chartContainer","layout","padding","topAxesCont","createChild","shouldClone","width","Object","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","background","fillOpacity","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","_bulletMask","prototype","applyInternalDefaults","readerTitle","language","translate","draw","toFront","mask","updateSeriesLegend","updatePlotElements","series","iterator","invalidate","validateData","_parseDataFrom","dataChangeUpdate","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","handleXAxisChange","event","updateXAxis","target","handleYAxisChange","updateYAxis","processXAxis","axis","newValue","chart","renderer","axisLetter","observe","handleXAxisRangeChange","dataProvider","processAxis","processXAxisRemoval","oldValue","off","processYAxis","handleYAxisRangeChange","processYAxisRemoval","range","getCommonAxisRange","xAxes","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","start","end","yAxes","seriesAppeared","show","appeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","opposite","toBack","processRenderer","_dataUsers","moveValue","gridContainer","breakContainer","inited","invalidateDataItems","defineProperty","_xAxes","_yAxes","handleSeriesAdded","xAxis","yAxis","undefined","fill","colors","next","stroke","e","raiseCriticalError","_cursor","cursor","removeDispose","_disposers","push","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","createCursor","visible","isHiding","xPosition","yPosition","showAxisTooltip","showSeriesTooltip","x","y","hideObjectTooltip","updateLegendValue","sprites","sprite","hideTooltip","position","topLeft","bottomRight","pixelWidth","pixelHeight","seriesPoints","each","tooltip","setBounds","point","showTooltipAtPosition","sort","a","b","length","top_1","bottom","topSeriesPoints","botSeriesPoints","i","len","nextY","pointY","invalid","validate","label","pixelY","measuredHeight","pixelMarginBottom","nextHeight","pixelMarginTop","dataItems","getUpdatedRange","difference","behavior","xRange","getIndex","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","maxPanOut","panStartRange","newStart","Math","max","newEnd","min","newRange","_scrollbarX","orientation","handleXScrollbarChange","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","round","realRange","dataInvalid","diff","roundPosition","axisRange","zoom","getPropertyValue","setPropertyValue","handleWheel","svgPoint","htmlContainer","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","locationX","maxWidth","locationY","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dispose","dataSourceDateFields","fields","populateDataSourceFields","dataFields","dataSourceNumberFields","processConfig","config","type","Error","axisRanges","index","configOrder","createSeries","_zoomOutButton","button","copyFrom","source","disposeData","scrollbarChart","registeredClasses","CategoryAxisDataItem","CategoryAxis","__WEBPACK_IMPORTED_MODULE_1__Axis__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_4__CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","text","locations","category","endCategory","properties","setProperty","dataItemsByCategory","axisFieldName","_lastDataItem","createDataItem","component","createAxisBreak","validateDataRange","dataCount","startIndex","floor","endIndex","ceil","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","dataItem","__disabled","isInBreak","appendDataItem","validateDataElement","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","ghostLabel","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","indexToPosition","endPosition","isRange","axisFill","location","positionToPoint","tick","updateTickElement","grid","updateGridElement","updateLabelElement","updateFillElement","fillRule","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","adjustDifference","startLocation","endLocation","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","angle","positionToAngle","anyToPoint","anyToPosition","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","initRenderer","baseGrid","disabled","AxisLabelCircular","__WEBPACK_IMPORTED_MODULE_1__AxisLabel__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","fdx","fdy","radius","isMeasured","setPercentProperty","pixelRadius","axisRadius","sign","inside","fixPoint","atan2","relativeRotation","dy","_measuredHeight","dx","_measuredWidth","labelRadius","bbox","rotation","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","XYSeriesDataItem","XYSeries","__WEBPACK_IMPORTED_MODULE_1__Series__","__WEBPACK_IMPORTED_MODULE_2__core_Sprite__","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_7__axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_14__core_rendering_Path__","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","working","stackValue","field","getWorkingValue","getValue","getMax","_xAxis","_yAxis","mainContainer","setElement","paper","stacked","pointerOrientation","returnBulletDefaultState","_tmin","clear","_tmax","_smin","_smax","defineFields","data","_xField","_yField","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","_chart","dataItemsX","dataItemsByAxis","dataItemsY","xAxisFieldName","xField","xOpenField","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","_xValueFields","_yValueFields","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","fillPath","path","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","oldAxis","removeKey","removeValue","set","registerSeries","invalidateData","_baseAxis","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","dispatchImmediately","_prevTooltipDataItem","toAxisPosition","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_a","bullets","_b","done","isHover","showTooltip","tooltipText","bullet","isDisposed","positionBullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","moveTo","bulletLocation","workingLocations","duration","animation","interpolationDuration","delay","sequencedInterpolation","sequencedInterpolationDelay","anim","isFinished","minZoomed","maxZoomed","once","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","field_1","setCalculatedValue","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","map","hasKey","xKey","yKey","stackKeyX","stackKeyY","DateAxisDataItem","DateAxis","__WEBPACK_IMPORTED_MODULE_1__ValueAxis__","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","endDate","dates","getTime","endValue","gridIntervals","dateFormats","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minSeriesDifference","MAX_VALUE","gridInterval","_gridInterval","gridDuration","pushAll","periodCount","baseDuration","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","hasMoreThanOne","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","startTime","startTimeStr","this_1","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","markUnitChange","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","adjustedMax","endTimestamp","valueToPosition","location_1","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","time","openTime","openDate","prevSeriesTime","_prevSeriesTime","abs","differece","_baseInterval","timeInterval","breakTemplate","template","startLine","endLine","fillShape","tooltipDateFormat","dateFormat","leftCount","leftDataItem","leftDate","rightCount","rightDataItem","rightDate","getCurrentLabelFormat","ticks","labels","zoomToDates","skipRangeEvent","parse","zoomToValues","asIs","XYCursor","__WEBPACK_IMPORTED_MODULE_1__Cursor__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","_lineX","_lineY","interfaceColors","selection","getFor","interactionsEnabled","lineX","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","w","_positionPrecision","h","validatePosition","triggerMoveReal","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","endX","endY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","reset","_selection","element","LineSeriesDataItem","LineSeries","__WEBPACK_IMPORTED_MODULE_1__XYSeries__","__WEBPACK_IMPORTED_MODULE_3__core_Container__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_9__core_elements_Line__","__WEBPACK_IMPORTED_MODULE_10__core_elements_Label__","__WEBPACK_IMPORTED_MODULE_11__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","connect","tensionX","tensionY","segmentsContainer","previousDataItem","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","segment","tooltipColorSource","openSegment","_workingStartIndex","sliceData","_workingEndIndex","openIndex","closeIndex","points","propertiesChanged","getFirst","contents","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","line","x2","copyToLegendMarker","hasLabels_1","children","child","clone","LineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","fillElement","PieSeriesDataItem","PieSeries","__WEBPACK_IMPORTED_MODULE_1__PercentSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__elements_PieTick__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","radiusValue","toValue","alignLabels","startAngle","endAngle","createSlice","createTick","createLabel","initSlice","slice","defaultState","scale","handleSliceScale","handleSliceMove","states","shiftRadius","togglable","_leftItems","_rightItems","_currentStartAngle","_arcRect","_maxRadiusPercent","radiusValuePercent","percent","reverse","aAngle","middleAngle","bAngle","arrangeLabels","innerRadius","pixelInnerRadius","arc","normalizedMiddleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","_pixelRadius","_pixelInnerRadius","definedBBox","Candlestick","__WEBPACK_IMPORTED_MODULE_1__Column__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Line__","createAssets","lowLine","highLine","AxisRendererCircular","__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_3__GridCircular__","__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","pixelRadiusReal","useChartAngles","pixelPerfect","tooltipLocation","setAxis","cos","sin","PI","coordinate","positionToCoordinate","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","createGrid","createFill","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_1__AxisFill__","GridCircular","__WEBPACK_IMPORTED_MODULE_1__Grid__","RadarChartDataItem","RadarChart","__WEBPACK_IMPORTED_MODULE_1__XYChart__","__WEBPACK_IMPORTED_MODULE_3__series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_4__core_Container__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_9__axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","innerRadiusModifyer","radarContainer","opacity","beforeDraw","rect","innerRect","wr","hr","mr","maxRadius","diameter","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_1__AxisBreak__","DateAxisBreak","__WEBPACK_IMPORTED_MODULE_1__ValueAxisBreak__","startValue","Cursor","__WEBPACK_IMPORTED_MODULE_2__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","_stick","trackable","clickable","interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","isLocalElement","pointer","svg","local","_stickPoint","triggerMove","isHidden","hideReal","stick","invalidatePosition","getPositions","triggerDown","setGlobalStyle","grabbing","triggerUp","getHitOption","interactions","default","cancelable","preventDefault","lockElement","XYChartScrollbar","__WEBPACK_IMPORTED_MODULE_1__core_elements_Scrollbar__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_5__types_XYChart__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_filters_DesaturateFilter__","__WEBPACK_IMPORTED_MODULE_11__core_rendering_Path__","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","_unselectedOverlay","thumbBackground","thumb","hoverState","downState","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","title","rangeChangeDuration","id","axisFills","transitionDuration","zoomOutAxes","updateByOrientation","handleDataChanged","updateThumb","RadarSeriesDataItem","RadarSeries","__WEBPACK_IMPORTED_MODULE_1__LineSeries__","connectEnds","unshift","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_1__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_1__AxisRendererY__","__WEBPACK_IMPORTED_MODULE_2__CategoryAxis__","__WEBPACK_IMPORTED_MODULE_3__core_elements_WavedCircle__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","gridType","axisAngle","gridLocation","count_1","cellEndLocation","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","updateTooltip","tooltipOrientation","bigNum","axisFullLength","ClockHand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_3__core_elements_Trapezoid__","_axis","pin","startWidth","endWidth","hand","leftSide","rightSide","x0","x1","_pin","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","property","to","updateValue","PieChartDataItem","PieChart","__WEBPACK_IMPORTED_MODULE_1__PercentChart__","__WEBPACK_IMPORTED_MODULE_3__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__","validateLayout","updateRadius","updateSeriesAngles","chartCont","chartRadius","chartPixelInnerRadius","seriesRadius","invalidateLayout","PercentChartDataItem","PercentChart","__WEBPACK_IMPORTED_MODULE_2__series_PercentSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__","feedLegend","legend","legendData_1","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","itemContainers","propertyFields","setLegend","PercentSeriesDataItem","PieTick","__WEBPACK_IMPORTED_MODULE_1__elements_Tick__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","_label","_slice","y0","y1","y2","r","attr","PieSeries3DDataItem","PieSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Slice3D__","depthValue","depth","depthPercent","ChordNode","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__elements_Bullet__","updateRotation","hiddenState","setStateOnChildren","invalidateLinks","sum","total","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","_outgoingSorted","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","ChordLink","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_3__core_elements_QuadraticCurve__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Path__","middleLine","isTemplate","fromX","fromY","toX","toY","cp","bulletsMask","positionBullets","mAngle1","mAngle2","cpx","cpy","TreeMapSeriesDataItem","TreeMapSeries","__WEBPACK_IMPORTED_MODULE_1__ColumnSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_6__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Object__","treeMapDataItem","_dataContext","columns","configField","seriesDataItem","showReal","removeChildren","column","AxisRendererX3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererX__","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","getWidth","ColumnSeries3DDataItem","ColumnSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_2__elements_Column3D__","columnsContainer","_columnsContainer","createColumnTemplate","column3D","Column3D","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Rectangle3D__","CandlestickSeriesDataItem","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_3__elements_Candlestick__","lowValueX","lowValueY","highValueX","highValueY","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateDataElementReal","validateCandlestick","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC","__WEBPACK_IMPORTED_MODULE_1__Candlestick__","openLine","highLowLine","closeLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","PyramidSeriesDataItem","PyramidSeries","__WEBPACK_IMPORTED_MODULE_1__FunnelSeries__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Utils__","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","_nextWidth","getNextValue","nextValue","slicesContainer","relValue","sliceLink","_pyramidHeight","_pyramidWidth","labelsContainer","ticksContainer","decorateSlice","pyramidWidth","linkWidth","linkHeight","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","s","sqrt","_nextY","sliceWidth","ConeColumn","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Cone__","coneColumn","CurvedColumn","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__","curvedColumn","realWidth","realHeight","realX","realY","tension","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__internal_charts_types_GaugeChart__","__WEBPACK_IMPORTED_MODULE_1__internal_charts_types_RadarChart__","__WEBPACK_IMPORTED_MODULE_2__internal_charts_types_XYChart__","__WEBPACK_IMPORTED_MODULE_3__internal_charts_types_SerialChart__","__WEBPACK_IMPORTED_MODULE_4__internal_charts_types_PieChart3D__","__WEBPACK_IMPORTED_MODULE_5__internal_charts_types_PieChart__","__WEBPACK_IMPORTED_MODULE_6__internal_charts_types_SlicedChart__","__WEBPACK_IMPORTED_MODULE_7__internal_charts_types_FlowDiagram__","__WEBPACK_IMPORTED_MODULE_8__internal_charts_types_SankeyDiagram__","__WEBPACK_IMPORTED_MODULE_9__internal_charts_types_ChordDiagram__","__WEBPACK_IMPORTED_MODULE_10__internal_charts_types_TreeMap__","__WEBPACK_IMPORTED_MODULE_11__internal_charts_types_XYChart3D__","__WEBPACK_IMPORTED_MODULE_12__internal_charts_Chart__","__WEBPACK_IMPORTED_MODULE_13__internal_charts_Legend__","__WEBPACK_IMPORTED_MODULE_14__internal_charts_elements_HeatLegend__","__WEBPACK_IMPORTED_MODULE_15__internal_charts_series_Series__","__WEBPACK_IMPORTED_MODULE_16__internal_charts_series_XYSeries__","__WEBPACK_IMPORTED_MODULE_17__internal_charts_series_LineSeries__","__WEBPACK_IMPORTED_MODULE_18__internal_charts_series_LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_19__internal_charts_series_CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_series_OHLCSeries__","__WEBPACK_IMPORTED_MODULE_21__internal_charts_series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_22__internal_charts_series_StepLineSeries__","__WEBPACK_IMPORTED_MODULE_23__internal_charts_series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_24__internal_charts_series_RadarColumnSeries__","__WEBPACK_IMPORTED_MODULE_25__internal_charts_series_PieSeries__","__WEBPACK_IMPORTED_MODULE_26__internal_charts_series_FunnelSeries__","__WEBPACK_IMPORTED_MODULE_27__internal_charts_series_PyramidSeries__","__WEBPACK_IMPORTED_MODULE_28__internal_charts_series_PictorialStackedSeries__","__WEBPACK_IMPORTED_MODULE_29__internal_charts_elements_PieTick__","__WEBPACK_IMPORTED_MODULE_30__internal_charts_elements_FunnelSlice__","__WEBPACK_IMPORTED_MODULE_31__internal_charts_series_PieSeries3D__","__WEBPACK_IMPORTED_MODULE_32__internal_charts_series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_33__internal_charts_series_ColumnSeries3D__","__WEBPACK_IMPORTED_MODULE_34__internal_charts_series_ConeSeries__","__WEBPACK_IMPORTED_MODULE_35__internal_charts_series_CurvedColumnSeries__","__WEBPACK_IMPORTED_MODULE_36__internal_charts_axes_Axis__","__WEBPACK_IMPORTED_MODULE_37__internal_charts_axes_Grid__","__WEBPACK_IMPORTED_MODULE_38__internal_charts_axes_AxisTick__","__WEBPACK_IMPORTED_MODULE_39__internal_charts_axes_AxisLabel__","__WEBPACK_IMPORTED_MODULE_40__internal_charts_axes_AxisLine__","__WEBPACK_IMPORTED_MODULE_41__internal_charts_axes_AxisFill__","__WEBPACK_IMPORTED_MODULE_42__internal_charts_axes_AxisRenderer__","__WEBPACK_IMPORTED_MODULE_43__internal_charts_axes_AxisBreak__","__WEBPACK_IMPORTED_MODULE_44__internal_charts_axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_45__internal_charts_axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_46__internal_charts_axes_CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_47__internal_charts_axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_48__internal_charts_axes_DurationAxis__","__WEBPACK_IMPORTED_MODULE_49__internal_charts_axes_DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_50__internal_charts_axes_ValueAxisBreak__","__WEBPACK_IMPORTED_MODULE_51__internal_charts_axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_52__internal_charts_axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_53__internal_charts_axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_54__internal_charts_axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_55__internal_charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_56__internal_charts_axes_AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_57__internal_charts_axes_GridCircular__","__WEBPACK_IMPORTED_MODULE_58__internal_charts_axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_59__internal_charts_axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_60__internal_charts_elements_Tick__","__WEBPACK_IMPORTED_MODULE_61__internal_charts_elements_Bullet__","__WEBPACK_IMPORTED_MODULE_62__internal_charts_elements_LabelBullet__","__WEBPACK_IMPORTED_MODULE_63__internal_charts_elements_CircleBullet__","__WEBPACK_IMPORTED_MODULE_64__internal_charts_elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_65__internal_charts_elements_ClockHand__","__WEBPACK_IMPORTED_MODULE_66__internal_charts_elements_FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_67__internal_charts_elements_FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_68__internal_charts_elements_SankeyNode__","__WEBPACK_IMPORTED_MODULE_69__internal_charts_elements_SankeyLink__","__WEBPACK_IMPORTED_MODULE_70__internal_charts_elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_71__internal_charts_elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_72__internal_charts_elements_NavigationBar__","__WEBPACK_IMPORTED_MODULE_73__internal_charts_elements_Column__","__WEBPACK_IMPORTED_MODULE_74__internal_charts_elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_75__internal_charts_elements_OHLC__","__WEBPACK_IMPORTED_MODULE_76__internal_charts_elements_RadarColumn__","__WEBPACK_IMPORTED_MODULE_77__internal_charts_elements_Column3D__","__WEBPACK_IMPORTED_MODULE_78__internal_charts_elements_ConeColumn__","__WEBPACK_IMPORTED_MODULE_79__internal_charts_elements_CurvedColumn__","__WEBPACK_IMPORTED_MODULE_80__internal_charts_cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_81__internal_charts_cursors_Cursor__","__WEBPACK_IMPORTED_MODULE_82__internal_charts_cursors_RadarCursor__","GaugeChartDataItem","GaugeChart","__WEBPACK_IMPORTED_MODULE_1__RadarChart__","__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__","hands","processHand","PieChart3DDataItem","PieChart3D","__WEBPACK_IMPORTED_MODULE_1__PieChart__","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries3D__","invalidateDataUsers","SlicedChartDataItem","SlicedChart","ChordDiagramDataItem","ChordDiagram","__WEBPACK_IMPORTED_MODULE_1__FlowDiagram__","__WEBPACK_IMPORTED_MODULE_5__elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_6__elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","nodePadding","chordContainer","nodesContainer","newTotal","_sorted","strNode","node","getNodeValue","minNodeSize","links","createNode","createLink","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_1__Line__","__WEBPACK_IMPORTED_MODULE_2__utils_Color__","__WEBPACK_IMPORTED_MODULE_3__rendering_Path__","__WEBPACK_IMPORTED_MODULE_4__utils_Math__","__WEBPACK_IMPORTED_MODULE_5__utils_Type__","p1","p2","point1","point2","TreeMapDataItem","TreeMap","__WEBPACK_IMPORTED_MODULE_4__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_5__series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Array__","rows","hasChildren","level","color","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","sorting","strictMinMax","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","dataUsers","cursorOverStyle","zoomToSeriesDataItem","toggleBullets","currentlyZoomed","rangeChangeAnimation","_dataDisposers","binaryTree","dice","sliceDice","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","i0","i1","row","handleDataItemValueChange","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_5__series_ColumnSeries3D__","fixLayout","fixColumns","clustered","depthIndex","i_1","OHLCSeriesDataItem","OHLCSeries","__WEBPACK_IMPORTED_MODULE_1__CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_3__elements_OHLC__","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesDataItem","StepLineSeries","__WEBPACK_IMPORTED_MODULE_2__StepLineSeriesSegment__","noRisers","prevPoint","point0","vertical","StepLineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__LineSeriesSegment__","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_3__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","addSprite","setColumnStates","disableUnusedColumns","PictorialStackedSeriesDataItem","PictorialStackedSeries","__WEBPACK_IMPORTED_MODULE_1__PyramidSeries__","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","hs","expandDistance","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_2__elements_ConeColumn__","CurvedColumnSeriesDataItem","CurvedColumnSeries","__WEBPACK_IMPORTED_MODULE_2__elements_CurvedColumn__","DurationAxisDataItem","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet","__WEBPACK_IMPORTED_MODULE_1__Bullet__","circle","NavigationBarDataItem","NavigationBar","__WEBPACK_IMPORTED_MODULE_1__core_Component__","__WEBPACK_IMPORTED_MODULE_2__core_DataItem__","__WEBPACK_IMPORTED_MODULE_4__core_elements_TextLink__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Triangle__","textLink","paddingTop","paddingBottom","_linksIterator","triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","ColumnSeriesDataItem","ColumnSeries","__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_7__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_9__elements_Column__","__WEBPACK_IMPORTED_MODULE_10__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_17__core_utils_Disposer__","_column","setColumn","_rangesColumns","_startLocation","_endLocation","simplifiedProcessing","baseAxisSeries","clusterCount","cellStartLocation","l","t","percentHeight","outOfBounds","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","virtualParent","itemWidth","itemHeight","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","isInTransition","itemsFocusable","role","focusable","itemReaderText","ev","populateString","_columns","legendDataItem","fromOpenState_1","fromPreviousState_1"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t// commented, because series does this.\r\n\t\t\t//$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t//axis.dataChangeUpdate();\r\n\t\t\t//});\r\n\r\n\t\t\t//$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t//axis.dataChangeUpdate();\r\n\t\t\t//});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processXAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processYAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", ()=>{\r\n\t\t\tif(this.inited){\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.processXAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.processYAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t}\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0, len = topSeriesPoints.length; i < len; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, locationX);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, locationX);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, locationY);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, locationY);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"} mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"}  Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX ;\r\n\t\tif(scrollbarX && scrollbarX instanceof XYChartScrollbar){\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY ;\t\r\n\t\tif(scrollbarY && scrollbarY instanceof XYChartScrollbar){\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis)=>{\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis)=>{\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif(this.axisLength <= 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif(!dataItem.isRange || label.text == undefined){\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx:number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy:number = 0;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param {number} value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * returns label radius in pixels\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.fdx = this.dx;\t\t\t\r\n\t\tthis.fdy = this.dy;\t\t\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.dataChangeUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem && dataItem.visible) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\t\tbullet.isHover = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tif (!bullet.isDisposed()) {\r\n\t\t\t\t\tbullet.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tlet anim = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t\tif(anim && !anim.isFinished()){\r\n\t\t\t\tanimation = anim;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\t\t\tif (animation && !animation.isFinished() && interpolationDuration == 0 && animation.duration > 0) {\r\n\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tlet hasMoreThanOne = false;\r\n\r\n\t\tif (this.chart.data.length > 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.data.length > 1) {\r\n\t\t\t\t\thasMoreThanOne = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (!hasMoreThanOne) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._prevSeriesTime = time;\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem) {\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\r\n\t\t\twhile (leftDate.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t\tif (leftCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (rightDate.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t\tif (rightCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif(source[\"_baseInterval\"]){\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\t\t\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentProperties } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\t \r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment:LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<this[\"_segment\"]>}\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif(dataItem && dataItem.segment){\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(this._workingStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/** \r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/** \r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param  {Slice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\t\t\t\tif ((a.slice.middleAngle + 360) % 360 < (b.slice.middleAngle + 360) % 360) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\tlet point: IPoint;\r\n\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\r\n\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t// right half\r\n\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 90) { // 91 makes less chances for flickering\r\n\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\t// left half\r\n\t\t\t\telse {\r\n\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\tx *= -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t}\r\n\r\n\t\t\tlabel.moveTo(point);\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRectangle}\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionObjectEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param  {number}  duration  Fade out duration (ms)\r\n\t * @return {Animation}            Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param {IPoint}                    point  Point to place cursor at\r\n\t * @param {\"hard\" | \"soft\" | \"none\"}  stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}  point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._scrollbarChart.data = chart.data;\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\t\t\t\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\t\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Series>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<PieSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tthis.updateSeriesAngles();\r\n\t}\t\r\n\r\n\tprotected updateSeriesAngles(){\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t\tseries.defaultState.properties.startAngle = this.startAngle;\r\n\t\t\tseries.defaultState.properties.endAngle = this.endAngle;\t\t\t\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\r\n\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t}\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t}\r\n\r\n\t\t\tseries.pixelRadius = radius;\r\n\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\tthis.seriesContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPercentProperty(\"radius\", value, true, false, 10, false)){\r\n\t\t\tthis.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"startAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t * \r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"endAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PercentChart}\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPercentChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPercentChartProperties}\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPercentChartEvents}\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PercentSeries}\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return {PercentSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (PercentSeriesDataItem.visible && !PercentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tPercentSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tPercentSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PercentChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"../series/PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar r = label.pixelRadius(slice.radius);\r\n\r\n\t\t\t\tx1 = x0 + r * slice.ix;\r\n\t\t\t\ty1 = y0 + r * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = slice.radius * $math.cos(labelAngle);\r\n\t\t\tlet y = slice.radius * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\t\t\t\tthis.positionBullets();\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\treturn dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.getValue(\"value\"), interpolationDuration);\r\n\t\t});\r\n\r\n\t\tlet animation = super.showReal(duration);\r\n\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\tthis.chart.invalidateLayout();\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t\tthis.chart.invalidateLayout();\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", 0, interpolationDuration);\r\n\t\t});\r\n\r\n\t\tlet animation = super.hideReal(duration);\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tchart.invalidateLayout();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.invalidateLayout();\r\n\t\t\t}\r\n\t\t\tchart.invalidateLayout();\r\n\t\t}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\r\n\t}\t\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t *\r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumn3DEvents}\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]){\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <keyof this[\"_dataFields\"]>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <keyof this[\"_dataFields\"]>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <keyof this[\"_dataFields\"]>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <keyof this[\"_dataFields\"]>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCEvents}\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PyramidSeries}\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @type {\"height\" | \"area\"}\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPyramidSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPyramidSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPyramidSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPyramidSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PyramidSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PyramidSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param  {FunnelSeriesDataItem} dataItem [description]\r\n\t * @return {number}                        [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t * \r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]} dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif(sum == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\t\t\t\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\t\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t * \r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t * @type {Cone}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @type {Orientation}\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\tlet ww = this.width;\r\n\t\tlet pw = 0.8;\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from other element of the same type.\r\n\t * \r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param {number}  value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param {Orientation}  value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {Orientation} Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 318\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { SlicedChart, SlicedChartDataItem, ISlicedChartAdapters, ISlicedChartDataFields, ISlicedChartEvents, ISlicedChartProperties } from \"./.internal/charts/types/SlicedChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentProperties, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { OHLCSeriesDataItem, IOHLCSeriesDataFields, IOHLCSeriesProperties, IOHLCSeriesEvents, IOHLCSeriesAdapters, OHLCSeries } from \"./.internal/charts/series/OHLCSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { FunnelSeries, FunnelSeriesDataItem, IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties } from \"./.internal/charts/series/FunnelSeries\";\nexport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./.internal/charts/series/PyramidSeries\";\nexport { IPictorialStackedSeriesAdapters, IPictorialStackedSeriesDataFields, IPictorialStackedSeriesEvents, IPictorialStackedSeriesProperties, PictorialStackedSeries, PictorialStackedSeriesDataItem } from \"./.internal/charts/series/PictorialStackedSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/elements/PieTick\";\nexport { FunnelSlice, IFunnelSliceAdapters, IFunnelSliceEvents, IFunnelSliceProperties } from \"./.internal/charts/elements/FunnelSlice\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\nexport { CurvedColumnSeries, CurvedColumnSeriesDataItem, ICurvedColumnSeriesAdapters, ICurvedColumnSeriesDataFields, ICurvedColumnSeriesProperties, ICurvedColumnSeriesEvents } from \"./.internal/charts/series/CurvedColumnSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { DurationAxisDataItem, DurationAxis, IDurationAxisAdapters, IDurationAxisDataFields, IDurationAxisEvents, IDurationAxisProperties } from \"./.internal/charts/axes/DurationAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { OHLC, IOHLCAdapters, IOHLCEvents, IOHLCProperties } from \"./.internal/charts/elements/OHLC\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\nexport { CurvedColumn, ICurvedColumnAdapters, ICurvedColumnEvents, ICurvedColumnProperties } from \"./.internal/charts/elements/CurvedColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"../series/FunnelSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {SlicedChart}\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ISlicedChartDataFields}\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ISlicedChartProperties}\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISlicedChartEvents}\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {FunnelSeries}\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * A list of Chord links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<ChordLink>}\r\n\t */\r\n\tpublic links: ListTemplate<ChordLink>;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"none\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, $math.min(chartContainer.innerWidth, chartContainer.innerHeight)) / 2;\r\n\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @type {TreeMapDataItem}\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to `1` to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"]): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (series.level == 1) {\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t * @type {OHLC}\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {OHLCSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {OHLCSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IOHLCSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCSeriesEvents}\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {OHLCSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"noRisers\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PictorialStackedSeries}\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\tpicture?: Sprite;\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PictorialStackedSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif(scale == Infinity){\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight;\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth;\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\r\n\t\tsuper.validateDataElements();\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PictorialStackedSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return {Sprite} Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param  {FunnelSlice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * CurvedColumnSeries module.\r\n * \r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CurvedColumnSeries}\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Dfines type of the column.\r\n\t * \r\n\t * @type {CurvedColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t *\r\n\t * @type {CurvedColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DurationAxis}\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDurationAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDurationAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDurationAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDurationAxisEvents}\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DurationAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t * \r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}      min        [description]\r\n\t * @param  {number}      max        [description]\r\n\t * @param  {number}      difference [description]\r\n\t * @param  {number}      gridCount  [description]\r\n\t * @param  {boolean}     strictMode [description]\r\n\t * @return {IMinMaxStep}            [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\tlet unit = this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param {string}  value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param {TimeUnit} timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {TimeUnit} Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: NavigationBarDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.index < this.startIndex || dataItem.index >= this.endIndex) {\r\n\t\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?:this[\"_dataItem\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\t\t\r\n\r\n\t\tlet outOfBounds:boolean = false;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif(Math.abs(r - l) - paddingLeft - paddingRight == 0){\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif(Math.abs(t - b) - paddingTop - paddingBottom == 0){\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts"],"sourceRoot":""}